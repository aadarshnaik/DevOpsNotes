IAM = Identity and Access Management, Global service
Root account created by default, shouldn't be used or shared
Users are people within your organization, and can be grouped
Groups only contain users, not other groups
Users don't have to belong to a group, and user can belong to multiple groups

IAM: Permissions
-----------------
Users or Groups can be assigned JSON documents called policies
These policies define the permissions of the users
In AWS you apply the least privilege princlipe: don't give more permissions than a user needs

IAM Policy Inheritance
-----------------------
We can attach policy at IAM Group level so every member of group will all get access
Inline Policy is only attached to user

IAM Policy Strucure
--------------------
{
    "Version": "2012-10-17",
    "Id": ""S3-Account-Permissions",
    "Statement": [
        {
            "Sid": "1",
            "Effect": "Allow",
            "Principal": {
                "AWS": ["arn:aws:iam::123456789012:root"]
            },
            "Action": [
                "s3:GetObject",
                "s3:PutObject"
            ],
            "Resource": ["arn:aws:s3:::mybucket/*"]
        }
    ]
}
Password Policy
----------------
Account Settings -> Change Password Policy

Generate Access Keys
-----------------------
We always use IAM user to geerate access Keys
In IAM --> Access Management --> Users --> Security Credentials --> Access Keys --> Create Access Keys
To configure AWS cli 
In command line ~> aws configure
Enter AWS Access Key ID, Secret Access key, Region 

IAM Roles and Services
------------------------
Some AWS service will need to perform action on your behalf
To do so we will assign permissions to AWS services with IAM Roles

IAM Credentials Report
------------------------
A report that lists all your account user and the status of their various Credentials

Setup MFA
----------
Click Account Name > My Security Credentials > MFA > Activate MFA 

IAM Access Advisor
-------------------
Access Advisor shows the service permissions granted to a user and when those services were last accessed. You can use this information to revise your policies.

IAM policies
-------------
JSON Doccuments that define a set of permissions for making requests to AWS Services, and can be used by IAM Users, User Groups and IAM Roles


AWS CLI
---------
To access AWS, we have 3 options:
    AWS Management Console (protected by password + MFA)
    AWS Command Line Interface (CLI): protected by access keys
    AWS Software Developer Kit (SDK) - for code: protected by access keys
Access Keys are generated through the AWS Console

AWS SDK
--------
AWS Software Development Kit
Language Specific API's
enables to access aand manage AWS services programmatically
Embedded within your application
Supports
    - SDK's (JavaScript, Python, PHP,.NET, Ruby, Java, Go, Node.js, C++)
    - Mobile SDKs (Android, iOS,...)
    - IoT Device SDKs (Embedded C, Arduino)
We have to use the AWS SDK when coding against AWS Services such as DynamoDB
AWS CLI uses the Python SDK (boto3)

Once we generate the Access Key ID and Secret Access Key
we execute $aws configure       to setup
Enter access keys, secret access, region name etc..
we can now run aws commands 

AWS CloudShell is a terminal in CloudShell

IAM Roles
----------
Some AWS service will need to perform actions on your behalf
To do so, we will assign permissions to AWS services with IAM Roles
Common roles:
    EC2 Instance Roles 
    Lambda Function Roles
    Roles for CloudFormation

IAM > Roles > AWS service > Select Service (EC2) > Assign Policies/Permissions > Name, Descriptuin etc > Create Role

IAM Security Tools
--------------------
IAM Credentials Report (account-level)
    A report that lists all your account's users and the status of their various Credentials
IAM Access Advisor (user-level)
    Access advisor shows the service permissions granted to a user and when those services were last accessed
    This information can be used to revise policies


IAM Guidelines and Best Practices
-----------------------------------
Don't use the root account except for AWS Account setup
One Physical user = One AWS user
Assign users to groups and assign permissions to groups
Create a strong password policy
Use and enforce the use of MFA
Create and use Roles for giving permissions to AWS services
Use Access keys for Programmatic Access (CLI/SDK)
Audit permissions to your account with IAM Credentials Report
Never share IAM users and Access Keys

-----------------------------------------------------------------------------------------


To test the Policies we make we can test it using AWS Policy Simulator


AWS EC2 Instance Metadata
---------------------------
AWS EC2 Instance Metadata is powerful but one of the least known features to developers
It allows AWS EC2 instances to "learn about themselves" without using an IAM Role for that purpose
The URL is http://169.254.169.254/latest/meta-data
You can retrieve the IAM Role name from the metadata, but you CANNOT retrieve the IAM Policy.
Metadata = Info about the EC2 instance
Userdata = launch script of the EC2 instance

In ec2 Instance 
    curl http://169.254.169.254/latest/meta-data/iam/security-credentials/DemoRoleEC2

